import requests

url = "https://us-south.ml.cloud.ibm.com/ml/v1/text/generation?version=2023-05-29"

body = {
	"input": """Relation of health and climate

Input: Data for a climate scientist;
Temperature above 40 degrees Celsius is more likely to cause circuits of weather  sensors to overheat
Output: Solution for climate scientist;
Provide insulation to  to sensors by use heat resistant  material

Input: Data of a doctor;
Air Quality  Index of above 120 is more likely to affect asthmatic patients
Output: Solution for the  doctor;
Regulate amount of dosage being administered by the inhaler to 50 milligrams  and the limit  number  of  times used to  3 times a day

Input: Data of a climate scientist;
Air Quality  Index of above 160 is more likely to obscure vision of cameras that assess the amount of carbon particles in the atmosphere
Output: Solution;
Equip cameras  with thermal  sensors that rely on heat signature rather than pictures taken by the camera

Input: Data for a doctor;
Temperature above 45 degrees  is more likely to affect patients who have high blood pressure

Output:""",
	"parameters": {
		"decoding_method": "greedy",
		"max_new_tokens": 200,
		"min_new_tokens": 0,
		"repetition_penalty": 1
	},
	"model_id": "ibm/granite-3-8b-instruct",
	"project_id": "2c82e8c6-6834-4d2f-86d3-1f07931ca896",
	"moderations": {
		"hap": {
			"input": {
				"enabled": True,
				"threshold": 0.5,
				"mask": {
					"remove_entity_value": True
				}
			},
			"output": {
				"enabled": True,
				"threshold": 0.5,
				"mask": {
					"remove_entity_value": True
				}
			}
		},
		"pii": {
			"input": {
				"enabled": True,
				"threshold": 0.5,
				"mask": {
					"remove_entity_value": True
				}
			},
			"output": {
				"enabled": True,
				"threshold": 0.5,
				"mask": {
					"remove_entity_value": True
				}
			}
		}
	}
}

headers = {
	"Accept": "application/json",
	"Content-Type": "application/json",
	"Authorization": "Bearer YOUR_ACCESS_TOKEN"
}

response = requests.post(
	url,
	headers=headers,
	json=body
)

if response.status_code != 200:
	raise Exception("Non-200 response: " + str(response.text))

data = response.json()
